import { useState } from 'react'
import { useAuthStore } from '@/store/authStore'
import { apiClient } from '@/lib/api'
import toast from 'react-hot-toast'
import { LoginCredentials, RegisterData, AuthSession } from '@/types/auth'

export function useAuth() {
  const { 
    login: storeLogin, 
    register: storeRegister, 
    logout: storeLogout, 
    verifyToken, 
    refreshToken,
    isLoading,
    isAuthenticated,
    user,
    session,
    setSession
  } = useAuthStore()
  
  const [isResendingConfirmation, setIsResendingConfirmation] = useState(false)
  const [isForgotPassword, setIsForgotPassword] = useState(false)
  const [isResettingPassword, setIsResettingPassword] = useState(false)

  const login = async (credentials: LoginCredentials) => {
    const result = await storeLogin(credentials)
    
    if (result.success) {
      toast.success('–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!')
      return { success: true }
    } else {
      // Show specific error message for email confirmation
      if (result.error === 'Email not confirmed' || result.message?.includes('–ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å')) {
        toast.error(result.message || '–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º')
        // Show additional help
        setTimeout(() => {
          toast('–ù–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ª–∏—Å—Ç? –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', {
            icon: 'üìß',
            duration: 5000
          })
        }, 1000)
      } else {
        toast.error(result.message || result.error || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É')
      }
      return { success: false, error: result.error, message: result.message }
    }
  }

  const register = async (data: RegisterData) => {
    const result = await storeRegister(data)
    
    if (result.success) {
      if (result.requiresEmailConfirmation) {
        toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')
        setTimeout(() => {
          toast('–í–∞–º —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç!', {
            icon: 'üìß',
            duration: 3000
          })
        }, 1000)
      } else {
        toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.')
      }
      return { success: true, requiresEmailConfirmation: result.requiresEmailConfirmation }
    } else {
      toast.error(result.error || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')
      return { success: false, error: result.error, message: result.message }
    }
  }

  const logout = async () => {
    await storeLogout()
    toast.success('–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏')
    return { success: true }
  }

  const resendConfirmation = async (email: string) => {
    setIsResendingConfirmation(true)
    try {
      const response = await apiClient.post('/auth/resend-confirmation', { email })
      
      if (response.success) {
        toast.success('–õ–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!')
        return { success: true, message: response.message }
      } else {
        toast.error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞')
        return { success: false, error: response.error, message: response.message }
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞'
      toast.error(errorMessage)
      return { success: false, error: errorMessage }
    } finally {
      setIsResendingConfirmation(false)
    }
  }

  const forgotPassword = async (email: string) => {
    setIsForgotPassword(true)
    try {
      const response = await apiClient.post('/auth/forgot-password', { email })
      
      if (response.success) {
        toast.success('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É')
        return { success: true, message: response.message }
      } else {
        toast.error(response.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è')
        return { success: false, error: response.error, message: response.message }
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è'
      toast.error(errorMessage)
      return { success: false, error: errorMessage }
    } finally {
      setIsForgotPassword(false)
    }
  }

  const resetPassword = async (token: string, password: string) => {
    setIsResettingPassword(true)
    try {
      console.log('Resetting password with token length:', token.length)
      
      // Make the API call to reset the password with the token in Authorization header
      const response = await apiClient.postWithOptions('/auth/reset-password', { 
        password,
        type: 'recovery'
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.success) {
        toast.success('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –∑ –Ω–æ–≤–∏–º –ø–∞—Ä–æ–ª–µ–º.')
        return { success: true }
      } else {
        toast.error(response.message || '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è')
        return { success: false, error: response.error, message: response.message }
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è'
      toast.error(errorMessage)
      return { success: false, error: errorMessage }
    } finally {
      setIsResettingPassword(false)
    }
  }

  return {
    login,
    register,
    logout,
    resendConfirmation,
    forgotPassword,
    resetPassword,
    verifyToken,
    refreshToken,
    setSession,
    isLoading,
    isResendingConfirmation,
    isForgotPassword,
    isResettingPassword,
    isAuthenticated,
    user,
    session
  }
}